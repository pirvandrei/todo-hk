{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","components/Togglable.js","components/LoginForm.js","components/NoteForm.js","services/notes.js","services/login.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","type","Footer","style","color","fontStyle","fontSize","Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","LoginForm","handleSubmit","username","setUsername","password","setPassword","onSubmit","event","preventDefault","value","onChange","target","NoteForm","createNote","newNote","setNewNote","date","Date","toISOString","Math","random","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","App","notes","setNotes","showAll","setShowAll","notificationMessage","setNotificationMessage","notificationType","setNotificationType","user","setUser","noteFormRef","useRef","useEffect","noteService","initialNotes","loggedUserJSON","window","sessionStorage","getItem","JSON","parse","addNote","noteObject","current","returnedNote","concat","handleLogin","userObject","loginService","setItem","stringify","loginForm","notesToShow","filter","notify","setTimeout","name","removeItem","map","i","key","find","n","changedNote","catch","exception","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"yOAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QAEN,4BAAQC,QAASL,GAAmBC,KCC3BK,EARM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAC/B,OAAgB,OAAZD,EACK,KAGF,yBAAKJ,UAAWK,GAAOD,ICUjBE,EAfA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,qDCTAC,EAAYC,IAAMC,YAAW,SAACC,EAAOC,GAAS,IAAD,EACnBC,oBAAS,GADU,mBAC1CC,EAD0C,KACjCC,EADiC,KAG3CC,EAAkB,CAAEC,QAASH,EAAU,OAAS,IAChDI,EAAkB,CAAED,QAASH,EAAU,GAAK,QAE5CK,EAAmB,WACvBJ,GAAYD,IASd,OANAM,8BAAoBR,GAAK,WACvB,MAAO,CACLO,uBAKF,6BACE,yBAAKf,MAAOY,GACV,4BAAQjB,QAASoB,GAAmBR,EAAMU,cAE5C,yBAAKjB,MAAOc,EAAiBrB,UAAU,oBACpCc,EAAMW,SACP,4BAAQvB,QAASoB,GAAjB,eAURX,EAAUe,YAAc,YAETf,QCgBAgB,EAnDG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACNZ,mBAAS,IADH,mBAC/Ba,EAD+B,KACrBC,EADqB,OAENd,mBAAS,IAFH,mBAE/Be,EAF+B,KAErBC,EAFqB,KAwBtC,OACE,6BACE,qCAEA,0BAAMC,SAhBS,SAACC,GAClBA,EAAMC,iBAENP,EAAa,CACXC,WACAE,aAGFD,EAAY,IACZE,EAAY,MAQR,wCAEE,2BAAOI,MAAOP,EAAUQ,SA3BH,SAACH,GAC5BJ,EAAYI,EAAMI,OAAOF,WA4BrB,wCAEE,2BACE/B,KAAK,WACL+B,MAAOL,EACPM,SA9BmB,SAACH,GAC5BF,EAAYE,EAAMI,OAAOF,WAgCrB,4BAAQ/B,KAAK,UAAb,YCXOkC,EA/BE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACLxB,mBAAS,IADJ,mBAC5ByB,EAD4B,KACnBC,EADmB,KAmBnC,OACE,yBAAK1C,UAAU,WACb,iDAEA,0BAAMiC,SAhBM,SAACC,GACfA,EAAMC,iBAENK,EAAW,CACTvC,QAASwC,EACTE,MAAM,IAAIC,MAAOC,cACjB9C,UAAW+C,KAAKC,SAAW,KAG7BL,EAAW,MAQP,2BAAON,MAAOK,EAASJ,SArBR,SAACH,GACpBQ,EAAWR,EAAMI,OAAOF,UAqBpB,4BAAQ/B,KAAK,UAAb,W,gBCxBJ2C,EAAQ,KA4BG,GAAEC,OAjBF,WAEb,OADgBC,IAAMC,IAdR,cAeCC,MAAK,SAACC,GAAD,OAAcA,EAASC,SAepBC,OAZb,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACPC,EAAS,CACbC,QAAS,CAAEC,cAAeZ,IAFf,SAGUE,IAAMW,KArBf,aAqB6BL,EAAWE,GAHzC,cAGPL,EAHO,yBAINA,EAASC,MAJH,2CAAH,sDAYqBQ,OALlB,SAACC,EAAIP,GAElB,OADgBN,IAAMc,IAAN,UA1BF,aA0BE,YAAwBD,GAAMP,GAC/BJ,MAAK,SAACC,GAAD,OAAcA,EAASC,SAGJW,SA1BxB,SAACC,GAChBlB,EAAK,iBAAakB,KCIL,GAAEC,MALN,uCAAG,WAAOC,GAAP,eAAAX,EAAA,sEACWP,IAAMW,KALf,aAK6BO,GAD/B,cACNf,EADM,yBAELA,EAASC,MAFJ,2CAAH,uDCyJIe,EApJH,WAAO,IAAD,EACUrD,mBAAS,IADnB,mBACTsD,EADS,KACFC,EADE,OAEcvD,oBAAS,GAFvB,mBAETwD,EAFS,KAEAC,EAFA,OAGsCzD,mBAAS,IAH/C,mBAGT0D,EAHS,KAGYC,EAHZ,OAIgC3D,mBAAS,IAJzC,mBAIT4D,EAJS,KAISC,EAJT,OAKQ7D,mBAAS,MALjB,mBAKT8D,EALS,KAKHC,EALG,KAOVC,EAAcC,mBAEpBC,qBAAU,WACRC,EAAYlC,SAASG,MAAK,SAACgC,GACzBb,EAASa,QAEV,IAEHF,qBAAU,WACR,IAAMG,EAAiBC,OAAOC,eAAeC,QAAQ,qBACrD,GAAIH,EAAgB,CAClB,IAAMP,EAAOW,KAAKC,MAAML,GACxBN,EAAQD,GACRK,EAAYlB,SAASa,EAAK9B,UAE3B,IAEH,IAAM2C,EAAU,SAACC,GACfZ,EAAYa,QAAQvE,mBAEpB6D,EAAY5B,OAAOqC,GAAYxC,MAAK,SAAC0C,GACnCvB,EAASD,EAAMyB,OAAOD,QAuBpBE,EAAW,uCAAG,WAAOC,GAAP,mBAAAxC,EAAA,6DACd5B,EAAWoE,EAAWpE,SACtBE,EAAWkE,EAAWlE,SAFR,kBAKGmE,EAAa/B,MAAM,CACpCtC,WACAE,aAPc,OAKV+C,EALU,OAUhBQ,OAAOC,eAAeY,QAAQ,oBAAqBV,KAAKW,UAAUtB,IAElEK,EAAYlB,SAASa,EAAK9B,OAC1B+B,EAAQD,GAbQ,4GAAH,sDAmBXuB,EAAY,WAChB,OACE,kBAAC,EAAD,CAAW7E,YAAY,SACrB,kBAAC,EAAD,CAAWI,aAAcoE,MAWzBM,EAAc9B,EAAUF,EAAQA,EAAMiC,QAAO,SAAC3G,GAAD,OAAUA,EAAKG,aAc5DyG,EAAS,SAAC9B,EAAqBE,GACnCD,EAAuBD,GACvBG,EAAoBD,GAEpB6B,YAAW,WACT9B,EAAuB,IACvBE,EAAoB,MACnB,MAGL,OACE,6BACE,qCACA,kBAAC,EAAD,CAAczE,QAASsE,EAAqBrE,KAAMuE,IAExC,OAATE,EACCuB,IAEA,6BACE,2BAAIvB,EAAK4B,KAAT,aACA,4BAAQxG,QAAS,kBA9BvBoF,OAAOC,eAAeoB,WAAW,qBAEjCH,EAAO,QAAD,OAAS1B,EAAK4B,MAAQ,WAE5BvB,EAAYlB,SAAS,MACrBc,EAAQ,WACRsB,MAwBM,aAvCN,kBAAC,EAAD,CAAW7E,YAAY,WAAWT,IAAKiE,GACrC,kBAAC,EAAD,CAAUxC,WAAYmD,MA8CtB,6BACE,4BAAQzF,QAAS,kBAAMuE,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACG8B,EAAYM,KAAI,SAAChH,EAAMiH,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLjH,KAAMA,EACNC,iBAAkB,kBAxGD,SAACkE,GAC1B,IAAMnE,EAAO0E,EAAMyC,MAAK,SAACC,GAAD,OAAOA,EAAEjD,KAAOA,KAClCkD,EAAW,2BAAQrH,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoF,EACGrB,OAAOC,EAAIkD,GACX7D,MAAK,SAAC0C,GACLvB,EAASD,EAAMsC,KAAI,SAAChH,GAAD,OAAWA,EAAKmE,KAAOA,EAAKnE,EAAOkG,SAEvDoB,OAAM,SAACC,GACNX,EAAO,SAAD,OACK5G,EAAKK,QADV,+CACwDkH,GAC5D,SAGF5C,EAASD,EAAMiC,QAAO,SAACS,GAAD,OAAOA,EAAEjD,KAAOA,SAyFVqD,CAAmBxH,EAAKmE,WAKtD,kBAAC,EAAD,CAAWvC,YAAY,YAAvB,8BAEA,kBAAC,EAAD,Q,MCpJN6F,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.6cf5414e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important ? 'make not important' : 'make important';\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message, type }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={type}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16,\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, by Andrei</em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useImperativeHandle } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' };\r\n  const showWhenVisible = { display: visible ? '' : 'none' };\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility,\r\n    };\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible} className=\"togglableContent\">\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired,\r\n};\r\n\r\nTogglable.displayName = 'Togglable';\r\n\r\nexport default Togglable;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LoginForm = ({ handleSubmit }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value);\r\n  };\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value);\r\n  };\r\n\r\n  const createUser = (event) => {\r\n    event.preventDefault();\r\n\r\n    handleSubmit({\r\n      username,\r\n      password,\r\n    });\r\n\r\n    setUsername('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n\r\n      <form onSubmit={createUser}>\r\n        <div>\r\n          username\r\n          <input value={username} onChange={handleUsernameChange} />\r\n        </div>\r\n        <div>\r\n          password\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nLoginForm.propTypes = {\r\n  handleSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { useState } from 'react';\r\n\r\nconst NoteForm = ({ createNote }) => {\r\n  const [newNote, setNewNote] = useState('');\r\n\r\n  const handleChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n\r\n    createNote({\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n    });\r\n\r\n    setNewNote('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"formDiv\">\r\n      <h2>Create a new note</h2>\r\n\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteForm;\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/notes';\r\n\r\nlet token = null;\r\n\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`;\r\n};\r\n\r\nconst get = (id) => {\r\n  const request = axios.get(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = async (newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token } };\r\n  const response = await axios.post(baseUrl, newObject, config);\r\n  return response.data;\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update, setToken };\r\n","import axios from 'axios';\r\nconst baseUrl = '/api/login';\r\n\r\n\r\n\r\nconst login = async (credentials) => {\r\n  const response = await axios.post(baseUrl, credentials);\r\n  return response.data;\r\n};\r\n\r\nexport default { login };\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport Note from './components/Note';\r\nimport Notification from './components/Notification';\r\nimport Footer from './components/Footer';\r\nimport Togglable from './components/Togglable';\r\nimport LoginForm from './components/LoginForm';\r\nimport NoteForm from './components/NoteForm';\r\nimport noteService from './services/notes';\r\nimport loginService from './services/login';\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [notificationMessage, setNotificationMessage] = useState('');\r\n  const [notificationType, setNotificationType] = useState('');\r\n  const [user, setUser] = useState(null);\r\n\r\n  const noteFormRef = useRef();\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.sessionStorage.getItem('loggedNoteappUser');\r\n    if (loggedUserJSON) {\r\n      const user = JSON.parse(loggedUserJSON);\r\n      setUser(user);\r\n      noteService.setToken(user.token);\r\n    }\r\n  }, []);\r\n\r\n  const addNote = (noteObject) => {\r\n    noteFormRef.current.toggleVisibility();\r\n\r\n    noteService.create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote));\r\n    });\r\n  };\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\r\n      })\r\n      .catch((exception) => {\r\n        notify(\r\n          `Note '${note.content}' was already removed from server : ${exception}`,\r\n          'error'\r\n        );\r\n\r\n        setNotes(notes.filter((n) => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const handleLogin = async (userObject) => {\r\n    let username = userObject.username;\r\n    let password = userObject.password;\r\n\r\n    try {\r\n      const user = await loginService.login({\r\n        username,\r\n        password,\r\n      });\r\n\r\n      window.sessionStorage.setItem('loggedNoteappUser', JSON.stringify(user));\r\n\r\n      noteService.setToken(user.token);\r\n      setUser(user);\r\n    } catch (exception) {\r\n      // ...\r\n    }\r\n  };\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <Togglable buttonLabel=\"login\">\r\n        <LoginForm handleSubmit={handleLogin} />\r\n      </Togglable>\r\n    );\r\n  };\r\n\r\n  const noteForm = () => (\r\n    <Togglable buttonLabel=\"new note\" ref={noteFormRef}>\r\n      <NoteForm createNote={addNote} />\r\n    </Togglable>\r\n  );\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n\r\n  const logout = () => {\r\n    window.sessionStorage.removeItem('loggedNoteappUser');\r\n\r\n    notify(`Bye, ${user.name}`, 'success');\r\n\r\n    noteService.setToken(null);\r\n    setUser(null);\r\n    loginForm();\r\n  };\r\n\r\n\r\n  const notify = (notificationMessage, notificationType) => {\r\n    setNotificationMessage(notificationMessage);\r\n    setNotificationType(notificationType);\r\n\r\n    setTimeout(() => {\r\n      setNotificationMessage('');\r\n      setNotificationType('');\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={notificationMessage} type={notificationType} />\r\n\r\n      {user === null ? (\r\n        loginForm()\r\n      ) : (\r\n        <div>\r\n          <p>{user.name} logged in\r\n          <button onClick={() => logout()}> logout </button>\r\n          </p>\r\n\r\n          {noteForm()} \r\n\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note, i) => (\r\n          <Note\r\n            key={i}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n\r\n      <Togglable buttonLabel=\"new note\"> buttonLabel forgotten... </Togglable>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}